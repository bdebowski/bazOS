=============
The Kernel:
=============
- Assembled relative to address 0000, then loaded into supervisor part of memory as one contiguous block
- A6 = address where Kernel was loaded (base address)
- All labels/symbols used relative to A6 (e.g. JMP   START(A6) )


===============
System Calls:
===============
- User code will place index of system call into D1.W where the indices are named in a file using EQU statements
- User code will then call Trap0 to start a system call
- System code in Trap function will then verify that this is a valid system call index, then index into a jump table to get the system subroutine address, then jump to that subroutine
- Subroutine returns, then Trap exception returns control to user code

SYS.X68 (included by user programs that perform system calls):
  * Document params for SYS_OPEN
  SYS_OPEN     EQU  0
  * Document params for SYS_CLOSE
  SYS_CLOSE    EQU  4
  * Document params for SYS_MALLOC
  SYS_MALLOC   EQU  8
  ...

SYSCALLS.X68 (included by KERNEL.X68):
  SYSCALLS_OPEN    ; open file subroutine
    ...
    RTS
  SYSCALLS_CLOSE   ; close file subroutine
    ...
    RTS
  SYSCALLS_TABLE
    DC.L  SYSCALLS_OPEN
    DC.L  SYSCALLS_CLOSE
    DC.L  SYSCALLS_MALLOC
  SYSCALLS_HANDLER ; handler for Trap #0 (system call)
    * D1.W = index into SYSCALLS_TABLE given by symbols defined in SYS.X68
    * Verify D1 contains value in valid range (Min, Max)
    JSR   SYSCALLS_TABLE(A6,D1.W)   ; A6 = base address of Kernel code
    RTE

USERCODE.X68:
  INCLUDE   "SYS.X68"
  ...
  MOVE.W  #SYS_OPEN,D1
  LEA     FILEPATH,A1
  TRAP    #0             ; will execute SYSCALLS_OPEN subroutine in supervisor state


=================
Multi-Tasking:
=================
- Scheduler will use auto-timed interrupts as callbacks to perform a context switch
- This looks something like:
  - System starts an auto-timed interrupt level N
  - System passes control to user code.  User code is running.
  - User code interrupted by interrupt level N
  - Interrupt handler uses Scheduler to:
    - save user code state/context (PC, Registers, SP, SR)
    - put the process to bottom of Scheduler queue
    - select next user code process to run (top of Scheduler queue)
    - load that processes context and set the PC on the stack accordingly
  - ISR returns from exception and now the new user code process is running
- Kernel processes also run on interrupt timers
  - i.e. every N ms ISR7 triggers and any critical kernel code that needs to run gets run


====================
Memory Management:
====================
- Kernel sits in protected system memory space
- User programs get loaded into user memory space
- MemoryManager assigns the user process an address space of contiguous memory
- A7 (the SP) is set to the top of that address space
- A6 is reserved for the base memory address of the program (bottom of the assigned address space)
- This means we write all programs to conform to the following requirements:
  - Every program is written to start at address 0x000000
  - Write programs such that empty space is avoided (i.e. we dont ORG to $2000 to declare data there when our instructions are at $0000)
  - All absolute addresses (i.e. labels/symbols) are referenced relative to A6 when used (e.g. MOVE.W  LABEL(A6),D1 instead of MOVE.W  LABEL,D1)
- Heap Memory:
  - MemoryManager will keep track of Heap memory for each process
  - i.e. a pointer to next free slot on the Heap, that gets incremented when memory is allocated
  - Requires pointers to pointers:
    STRUCT1   DS.L   1     ; STRUCT1 is a memory address to a location that stores a memory address
    STRUCT2   DS.L   2     ; STRUCT2 is a memory address to a location that stores a memory address
    ...
    * Dynamically allocate 512 Bytes of storage for STRUCT1
    LEA       STRUCT1,A1
    MOVE.L    #512,D1
    BSR       MALLOC       ; System will allocate 512 Bytes of space on the heap and the value at STRUCT1 will be the starting memory address of the allocated block
  - Assuming a fixed max size for the process stack memory, the MemoryManager will recognize when there is not enough space left in the process's assiged address space to allocate N Bytes on the Heap.  In this case the process will be moved (allocated) to a new, larger space in memory.
- Since processes must be assigned to contiguous blocks of memory we will likely have to repack processes in the memory space at times.